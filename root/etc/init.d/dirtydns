#!/bin/sh /etc/rc.common

START=91

NAME=dirtydns
PROG=/usr/bin/dirtydns
CRON_FILE=/etc/crontabs/root
USE_PROCD=1

add_cron() {
	local enable
	local auto_update_ipset
	config_get_bool enable $1 enable
	config_get_bool auto_update_ipset $1 auto_update_ipset
	touch $CRON_FILE
	sed -i '/dirtydns_update_ipset/d' $CRON_FILE
	([ "$enable" = 1 ] && [ "$auto_update_ipset" = 1 ]) && echo "0 3 * * 6 /usr/share/dirtydns/dirtydns_update_ipset.sh >>/tmp/dirtydns_update.log 2>&1" >>$CRON_FILE
	crontab $CRON_FILE
}

del_cron() {
	sed -i '/dirtydns_update_ipset/d' $CRON_FILE
	/etc/init.d/cron restart
}

is_exist_ipset() {
	ipset list -n $1 &>/dev/null
}

destroy_ipset() {
	ipset flush $1 2>/dev/null
	ipset destroy $1 2>/dev/null
}

create_chnroute_ipset() {
	local enable
  local creat_ipset
	config_get_bool enable $1 enable
  config_get_bool creat_ipset $1 creat_ipset
	([ "$enable" = 1 ] && [ "$creat_ipset" = 1 ]) || return 0

	config_foreach create_ipv4_ipset dirtydns
}

create_ipv4_ipset() {
	local ipset_name
	config_get ipset_name $1 "ipset_dirty" "chnroute"

	if is_exist_ipset $ipset_name; then
		ipset flush $ipset_name
	else
		ipset create $ipset_name hash:net hashsize 64 family inet
	fi

	# import ipv4 chnroute
	ipset restore <<- EOF
		$(cat /etc/dirtydns/chnroute.txt | sed "s/^/add $ipset_name /")
	EOF
}

destroy_chnroute_ipset() {
	local creat_ipset
	config_get_bool creat_ipset $1 creat_ipset
	[ "$creat_ipset" = 1 ] || return 0

	# force destroy, even though does not exist or config file changed
	config_foreach destroy_ipv4_ipset dirtydns
}

destroy_ipv4_ipset() {
	local ipset_name
	config_get ipset_name $1 "ipset_dirty" "chnroute"
	destroy_ipset $ipset_name
}

start_instance() {
  local enable
  local port
  local ipset
  local dirty
  local secured

	config_get_bool enable $1 enable
	[ "$enable" = 1 ] || return 0

  config_get port "$1" port
  config_get ipset "$1" ipset_dirty
  config_get dirty "$1" dirty_upstream
  config_get secured "$1" secured_upstream

  procd_open_instance
  procd_set_param respawn
  procd_set_param command $PROG $port $dirty $secured $ipset
  procd_set_param stdout 1
  procd_set_param stderr 1
  procd_close_instance
}

service_triggers() {
  procd_add_reload_trigger $NAME
}

start_service() {
  config_load $NAME
  config_foreach create_chnroute_ipset dirtydns
  config_foreach add_cron dirtydns
  config_foreach start_instance dirtydns
}

stop_service() {
	config_load $NAME
	config_foreach destroy_chnroute_ipset dirtydns
	del_cron
}

reload_service() {
	stop
	start
}